/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
  [_ in K]?: never
}
export type Incremental<T> =
  | T
  | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never }
const defaultOptions = {} as const

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any }
}

export type Book = {
  __typename?: 'Book'
  createdAt: Scalars['ISO8601DateTime']['output']
  id: Scalars['ID']['output']
  title?: Maybe<Scalars['String']['output']>
  updatedAt: Scalars['ISO8601DateTime']['output']
}

/** Autogenerated input type of CreateBook */
export type CreateBookInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  title: Scalars['String']['input']
}

/** Autogenerated return type of CreateBook. */
export type CreateBookPayload = {
  __typename?: 'CreateBookPayload'
  book: Book
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
}

/** Autogenerated input type of DestroyBook */
export type DestroyBookInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  id: Scalars['ID']['input']
}

/** Autogenerated return type of DestroyBook. */
export type DestroyBookPayload = {
  __typename?: 'DestroyBookPayload'
  book: Book
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
}

export type Mutation = {
  __typename?: 'Mutation'
  createBook?: Maybe<CreateBookPayload>
  destroyBook?: Maybe<DestroyBookPayload>
  /** An example field added by the generator */
  testField: Scalars['String']['output']
  updateBook?: Maybe<UpdateBookPayload>
}

export type MutationCreateBookArgs = {
  input: CreateBookInput
}

export type MutationDestroyBookArgs = {
  input: DestroyBookInput
}

export type MutationUpdateBookArgs = {
  input: UpdateBookInput
}

export type Query = {
  __typename?: 'Query'
  /** Find a book by ID */
  book: Book
  /** Find books */
  books: Array<Book>
  /** An example field added by the generator */
  testField: Scalars['String']['output']
}

export type QueryBookArgs = {
  id: Scalars['ID']['input']
}

/** Autogenerated input type of UpdateBook */
export type UpdateBookInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>
  id: Scalars['ID']['input']
  title: Scalars['String']['input']
}

/** Autogenerated return type of UpdateBook. */
export type UpdateBookPayload = {
  __typename?: 'UpdateBookPayload'
  book: Book
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>
}

export type CreateBookMutationVariables = Exact<{
  input: CreateBookInput
}>

export type CreateBookMutation = {
  __typename?: 'Mutation'
  createBook?: {
    __typename?: 'CreateBookPayload'
    book: { __typename?: 'Book'; id: string; title?: string | null }
  } | null
}

export type DestroyBookMutationVariables = Exact<{
  input: DestroyBookInput
}>

export type DestroyBookMutation = {
  __typename?: 'Mutation'
  destroyBook?: {
    __typename?: 'DestroyBookPayload'
    book: { __typename?: 'Book'; id: string }
  } | null
}

export type UpdateBookMutationVariables = Exact<{
  input: UpdateBookInput
}>

export type UpdateBookMutation = {
  __typename?: 'Mutation'
  updateBook?: {
    __typename?: 'UpdateBookPayload'
    book: { __typename?: 'Book'; id: string; title?: string | null }
  } | null
}

export type FetchBooksQueryVariables = Exact<{ [key: string]: never }>

export type FetchBooksQuery = {
  __typename?: 'Query'
  books: Array<{ __typename?: 'Book'; id: string; title?: string | null }>
}

export const CreateBookDocument = gql`
  mutation CreateBook($input: CreateBookInput!) {
    createBook(input: $input) {
      book {
        id
        title
      }
    }
  }
`
export type CreateBookMutationFn = Apollo.MutationFunction<
  CreateBookMutation,
  CreateBookMutationVariables
>

/**
 * __useCreateBookMutation__
 *
 * To run a mutation, you first call `useCreateBookMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBookMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBookMutation, { data, loading, error }] = useCreateBookMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateBookMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateBookMutation, CreateBookMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateBookMutation, CreateBookMutationVariables>(
    CreateBookDocument,
    options
  )
}
export type CreateBookMutationHookResult = ReturnType<typeof useCreateBookMutation>
export type CreateBookMutationResult = Apollo.MutationResult<CreateBookMutation>
export type CreateBookMutationOptions = Apollo.BaseMutationOptions<
  CreateBookMutation,
  CreateBookMutationVariables
>
export const DestroyBookDocument = gql`
  mutation DestroyBook($input: DestroyBookInput!) {
    destroyBook(input: $input) {
      book {
        id
      }
    }
  }
`
export type DestroyBookMutationFn = Apollo.MutationFunction<
  DestroyBookMutation,
  DestroyBookMutationVariables
>

/**
 * __useDestroyBookMutation__
 *
 * To run a mutation, you first call `useDestroyBookMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyBookMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyBookMutation, { data, loading, error }] = useDestroyBookMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDestroyBookMutation(
  baseOptions?: Apollo.MutationHookOptions<DestroyBookMutation, DestroyBookMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DestroyBookMutation, DestroyBookMutationVariables>(
    DestroyBookDocument,
    options
  )
}
export type DestroyBookMutationHookResult = ReturnType<typeof useDestroyBookMutation>
export type DestroyBookMutationResult = Apollo.MutationResult<DestroyBookMutation>
export type DestroyBookMutationOptions = Apollo.BaseMutationOptions<
  DestroyBookMutation,
  DestroyBookMutationVariables
>
export const UpdateBookDocument = gql`
  mutation UpdateBook($input: UpdateBookInput!) {
    updateBook(input: $input) {
      book {
        id
        title
      }
    }
  }
`
export type UpdateBookMutationFn = Apollo.MutationFunction<
  UpdateBookMutation,
  UpdateBookMutationVariables
>

/**
 * __useUpdateBookMutation__
 *
 * To run a mutation, you first call `useUpdateBookMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBookMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBookMutation, { data, loading, error }] = useUpdateBookMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateBookMutation(
  baseOptions?: Apollo.MutationHookOptions<UpdateBookMutation, UpdateBookMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateBookMutation, UpdateBookMutationVariables>(
    UpdateBookDocument,
    options
  )
}
export type UpdateBookMutationHookResult = ReturnType<typeof useUpdateBookMutation>
export type UpdateBookMutationResult = Apollo.MutationResult<UpdateBookMutation>
export type UpdateBookMutationOptions = Apollo.BaseMutationOptions<
  UpdateBookMutation,
  UpdateBookMutationVariables
>
export const FetchBooksDocument = gql`
  query fetchBooks {
    books {
      id
      title
    }
  }
`

/**
 * __useFetchBooksQuery__
 *
 * To run a query within a React component, call `useFetchBooksQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchBooksQuery({
 *   variables: {
 *   },
 * });
 */
export function useFetchBooksQuery(
  baseOptions?: Apollo.QueryHookOptions<FetchBooksQuery, FetchBooksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FetchBooksQuery, FetchBooksQueryVariables>(FetchBooksDocument, options)
}
export function useFetchBooksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<FetchBooksQuery, FetchBooksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FetchBooksQuery, FetchBooksQueryVariables>(FetchBooksDocument, options)
}
export function useFetchBooksSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<FetchBooksQuery, FetchBooksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<FetchBooksQuery, FetchBooksQueryVariables>(
    FetchBooksDocument,
    options
  )
}
export type FetchBooksQueryHookResult = ReturnType<typeof useFetchBooksQuery>
export type FetchBooksLazyQueryHookResult = ReturnType<typeof useFetchBooksLazyQuery>
export type FetchBooksSuspenseQueryHookResult = ReturnType<typeof useFetchBooksSuspenseQuery>
export type FetchBooksQueryResult = Apollo.QueryResult<FetchBooksQuery, FetchBooksQueryVariables>
